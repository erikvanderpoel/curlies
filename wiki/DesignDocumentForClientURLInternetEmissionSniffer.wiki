Shaopeng Jia and Erik van der Poel, 21 Nov 2009

=== Introduction ===

This document is a design doc for an automated browser URL behavior testing tool. It describes the need for browser URL behavior testing, the current solution with this tool, and possible future plans to enhance the tool.

=== Background ===

There are many URL parsing, escaping and encoding details, and the implementations among different browsers on different platforms often differ in subtle ways. IT organizations are interested in being compatible with the major implementations, and in canonicalizing URLs for storage in our internal data structures. The tool described here will help people stay informed of the major implementations as they evolve over time. We also publish some of [http://code.google.com/p/curlies/source/browse/trunk/test_results the differences between the browsers] and [http://code.google.com/p/curlies/wiki/RecommendationsForBrowserDevelopers recommendations] in the hope that they will align more.

=== Current Situation ===

Testing are being carried out across all major modern browsers (IE 6, 7, 8; Firefox 2, 3.0, 3.5;  Safari 3, 4; Chrome 2, 3; Opera 9) on all the major platforms (Windows XP, Windows Vista, Mac and Linux), and without any proxy in place. Over [http://code.google.com/p/curlies/source/browse/trunk/test_pages 1300 tests] are created to test various parts of the a URL (such as host, path and query, etc.) and HTML form submissions. The generated reports are available [http://code.google.com/p/curlies/source/browse/trunk/test_results here]. Read the [http://code.google.com/p/curlies/source/browse/trunk/test_results/README README file] for how the results folders are organized. When viewing the results in code.google.com, click "View raw file" to see the well-formatted reports.

=== Possible Future Goals ===
  * Extend testing to browsers on smartphones such as Android and iPhone *(In progress)*
  * Add more test cases, such as empty login, etc.
  * Test Toolbar URL behavior on different browser/platform.
  * Investigate/test differences in behaviors of two different DOM calls in different browsers depending on the part of the URL, for example:
    alert( document.getElementById('bar').getAttribute('src').indexOf('\n') ); <br />
    alert( document.getElementById('bar').src.indexOf('\n') );
  * Do mapreduce/log-analysis to collect statistics on how many percent of URLs on the web are affected due to the reason that browsers behave differently for those URLs.

=== Detailed Design ===
In a nutshell, the tool automatically generates testcases which are URLs that contain strings of interest. The testcases are then loaded on each browser/platform, and the tool reports how the strings of interest are handled by the browser/platform by analyzing the corresponding DNS and HTTP packets that were sent out. The tool then automatically generate well-formatted reports with results from the specified browsers/platforms listed side-by-side. Differences among browsers/platforms are highlighted in yellow.

The testing process could be broken into 4 independent steps: 
  # Test page generation
  # Link invocation
  # Packet sniffing
  # Result page generation

*_Test Page Generation_*

Test pages are automatically generated by the code at [http://code.google.com/p/curlies/source/browse/trunk/source/test-page-generator.cc test-page-generator.cc], and live in the folder [http://code.google.com/p/curlies/source/browse/trunk/#trunk/test_pages test_pages]. To generate test pages, test-page-generator.cc makes use of [http://code.google.com/p/curlies/source/browse/trunk/source/testcases.cc testcases.cc], which contains all the test cases we want to test. New tests could be added by modifying testcases.cc.

To regenerate tests, first cd to trunk/, then run the following commands:
{{{
% g++ -Wall -g source/testcases.cc source/test-page-generator.cc -o test-page-generator
% ./test-page-generator
}}}
The generated test pages are outputted under the directory test_pages/

Currently over 1300 test cases are generated. These contain tests for various parts of a URL (host, path, parameter and query) and HTTP Form submission, and for different encodings (ASCII and big5). Tests for other encodings could be easily added.