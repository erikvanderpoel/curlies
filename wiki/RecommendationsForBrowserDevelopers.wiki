Erik van der Poel, 20 Nov 2009

=== Introduction ===

This document makes recommendations for browser developers who wish to transform URLs in the same way as other browsers. In addition to interoperability considerations, some security recommendations are made.

=== Document Conventions ===

Recommendations are in normal paragraphs like this one.

  _*Rationale*_ The rationale for the previous paragraph is given in paragraphs like this one.

  _*Diffs*_ Differences between the browsers are highlighted in paragraphs like this one.

ASCII characters may be written in the 0xHH notation, where H is a hex digit. Unicode characters are written in the U+HHHH or U+HHHHHH notation.

=== Definitions ===

  * Encoding: character encoding such as UTF-8, not to be confused with %-escaping.
  * Escaping: %-escaping, not to be confused with HTML's &-escaping.
  * IRI: Internationalized Resource Identifier, [http://www.rfc-editor.org/rfc/rfc3987.txt RFC 3987].
  * URI: Uniform Resource Identifier, [http://www.rfc-editor.org/rfc/rfc3986.txt RFC 3986].
  * URL: Uniform Resource Locator, as used in HTML's `<a href="...">`, for example. URLs may contain mixtures of %-escaped and not-escaped non-ASCII text, so they are neither pure URIs nor pure IRIs.

=== General Recommendation ===

The robustness principle is:

  _Be conservative in what you do; be liberal in what you accept from others._

However, browsers are too liberal in many cases, and this has led to the proliferation of garbage on the Web. So the new recommendations are as follows.

  _Consumers should be as liberal as the major implementation(s), but not more liberal than that. Where security considerations are more important, consumers should be more conservative._

  _Producers should be conservative, to avoid constructs where consumers differ._

Note that a browser is both a consumer (of HTML documents) and a producer (of DNS and HTTP packets).

=== Parsing URLs in HTML Attributes ===

When an HTML implementation reads in an HTML file, it first converts the entire file to one of the Unicode encodings, often UTF-16. It then parses the HTML, converting character references like &#12345; to Unicode along the way. The details of these steps are not in scope for this document.

This section is about parsing URLs found in HTML attributes like `<a href="...">`. After extracting the attribute value, the steps are as follows. The http, https and ftp schemes are in scope for this document. Other schemes are not in scope.

*Step 1.* Remove white space from the beginning and end of the string.

*Step 2.* Remove TAB, LF and CR (0x09, 0x0A, 0x0D) from the entire string.

  _*Diffs*_ IE removes NUL (0x00) from the entire HTML file. See [http://curlies.googlecode.com/svn/trunk/test_results/operating_systems/WinVista_SP1/path_ascii_results.html test results].

*Step 3.* Parse the URL, looking for the ASCII syntax characters such as : and /. Developers who wish to be compatible with IE should convert \ to / in all parts before the ?query and #fragment. The structure of a URL is `scheme://user:password@host:port/path;params?query#fragment`.

*Step 4.* User/password: If there is no user:password but there is an @, remove the @.

*Step 5.* Host: Unescape the host name. If the result is not well-formed UTF-8, reject the URL. If the host name contains any ASCII control characters (0x00-0x1F, 0x7F) or any URL syntax character (:@/\;?#), reject the URL.

  _*Rationale*_ Control characters and syntax characters are considered "tricky" and rejected on security grounds.

  _*Diffs*_ Safari performs these steps in the wrong order, leading to a Punycode encoding of a string that contains a dot (0x2E). See the [http://curlies.googlecode.com/svn/trunk/test_results/operating_systems/MacOSX10_5_8/host_big5_dns_results.html test results].

If there are any non-ASCII bytes, perform Nameprep and Punycode. If either of these steps fail, reject the URL. IDNA2003 did not explicitly specify what to do with dots (0x2E) that appear as a result of the Nameprep step. The recommendation is to split the name into labels after the Nameprep step.

*Step 6.* Port.

*Step 7.* Path: Convert to UTF-8 and %-escape the non-ASCII bytes.

*Step 8.* Params: These are defined for the ftp scheme. Web sites may use the semicolon (;) in URLs with the http/https schemes, but the client treats the params as just another string at the end of the path.

  _*Diffs*_ Some browsers terminate the host name at the semicolon, while others do not. See [http://curlies.googlecode.com/svn/trunk/test_results/operating_systems/WinVista_SP1/host_ascii_dns_results.html test results].

*Step 9.* Query: If the original encoding of the HTML document was UTF-16- or UTF-32-based, convert the query to UTF-8. Otherwise, convert the query to the original encoding.

*Step 10.* Fragment: Store the fragment as is.

  _*Rationale*_ Unescaping the fragment and running a character encoding detector on it lead to non-deterministic behavior. Scripts in the document environment can decide what to do with escaped fragments.

  _*Diffs*_ Firefox unescapes the fragment and runs an encoding detector.