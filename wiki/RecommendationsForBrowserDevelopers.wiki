Erik van der Poel, 21 Nov 2009

=== 1 Introduction ===

This document makes recommendations for browser developers who wish to transform URLs in the same way as other browsers. In addition to these interoperability considerations, some security recommendations are made.

This document is not intended to be a full specification. It only highlights the differences between the current versions of the browsers (and operating systems).

=== 2 Document Conventions ===

Recommendations are in normal paragraphs like this one.

  _*Rationale*_ The rationale for the previous paragraph is given in paragraphs like this one.

  _*Diffs*_ Differences between the browsers are highlighted in paragraphs like this one.

Characters are written in the U+HHHH or U+HHHHHH notation, where H is a hex digit.

=== 3 Definitions ===

  * Character encoding: e.g. UTF-8, not to be confused with percent-encoding
  * IRI: Internationalized Resource Identifier, [http://www.rfc-editor.org/rfc/rfc3987.txt RFC 3987]
  * Percent-encoding: %HH where H is a hex digit, not to be confused with character encoding
  * URI: Uniform Resource Identifier, [http://www.rfc-editor.org/rfc/rfc3986.txt RFC 3986]
  * URL: Uniform Resource Locator, as defined in [http://dev.w3.org/html5/spec/Overview.html#terminology-0 HTML5]. URLs may contain mixtures of percent-encoded and not-percent-encoded non-ASCII text, so they are neither pure URIs nor pure IRIs

=== 4 Interoperability ===

In order to achieve interoperability, browsers must behave the same way in a number of areas, including protocol elements, script interfaces, user input, and display.

==== 4.1 Protocol Elements ====

URLs appear in a number of protocol elements, including HTML attributes and HTTP requests. Also, the host name is often extracted from a URL in order to place it in other protocol elements like DNS packets and the HTTP Host request header.

The robustness principle is usually stated as follows.

  _Be conservative in what you do; be liberal in what you accept from others._

However, browsers have often been too liberal, and this has led to the proliferation of garbage on the Web. So the new recommendations are as follows.

  _Consumers should be as liberal as the major implementation(s), but not more liberal than that. Where security considerations are more important, consumers should be more conservative._

  _Producers should be conservative, to avoid constructs where consumers differ._

Note that a browser is both a consumer (of HTML documents, URLs typed by the user, etc) and a producer (of DNS packets, HTTP requests, etc).

==== 4.2 Script Interfaces ====

When browsers read in an HTML document, they build a DOM (Document Object Model) which can then be manipulated by scripts defined in or linked from the document.

==== 4.3 User Input ====

==== 4.4 Display ====

=== 5 Parsing a URL ===

When an HTML implementation reads in an HTML file, it first converts the entire file to one of the Unicode character encodings, often UTF-16. It then parses the HTML, converting character references like &#12345; to Unicode along the way. The details of these steps are not in scope for this document.

This section is about parsing URLs found in HTML attributes like `<a href="...">`. After extracting the attribute value, the steps are as follows. The http, https and ftp schemes are in scope for this document. Other schemes are not in scope.

*Step 1.* Remove white space from the beginning and end of the string.

*Step 2.* Remove TAB, LF and CR (U+0009, U+000A, U+000D) from the entire string.

  _*Diffs*_ IE also removes NUL (U+0000) from the entire HTML file. See [http://curlies.googlecode.com/svn/trunk/test_results/operating_systems/WinVista_SP1/path_ascii_results.html test results].

*Step 3.* Parse the URL, looking for the ASCII syntax characters such as : and /. Developers who wish to be compatible with IE should convert \ to / in all parts before the ?query and #fragment. The structure of a URL is `scheme://user:password@host:port/path;params?query#fragment`.

*Step 4.* User/password: If there is no user:password but there is an @, remove the @.

*Step 5.* Host: Percent-decode the host name. If the result is not well-formed UTF-8, reject the URL. If the host name contains any ASCII control characters (U+0000-1F, U+007F) or any URL syntax character (:@/\;?#), reject the URL.

  _*Rationale*_ Control characters and syntax characters are considered "tricky" and rejected on security grounds.

  _*Diffs*_ Safari performs these steps in the wrong order, leading to a Punycode encoding of a string that contains a dot (U+002E). See the [http://curlies.googlecode.com/svn/trunk/test_results/operating_systems/MacOSX10_5_8/host_big5_dns_results.html test results].

If there are any non-ASCII bytes, perform Nameprep and Punycode. If either of these steps fail, reject the URL. IDNA2003 did not explicitly specify what to do with dots (U+002E) that appear as a result of the Nameprep step. The recommendation is to split the name into labels after the Nameprep step.

*Step 6.* Port.

*Step 7.* Path: Convert to UTF-8 and percent-encode the non-ASCII bytes.

*Step 8.* Params: These are defined for the ftp scheme. Web sites may use the semicolon (;) in URLs with the http/https schemes, but the client treats the params as just another string at the end of the path.

  _*Diffs*_ Some browsers terminate the host name at the semicolon, while others do not. See [http://curlies.googlecode.com/svn/trunk/test_results/operating_systems/WinVista_SP1/host_ascii_dns_results.html test results].

*Step 9.* Query: If the original character encoding of the HTML document was UTF-16- or UTF-32-based, convert the query to UTF-8. Otherwise, convert the query to the original character encoding.

*Step 10.* Fragment: Store the fragment as is.

  _*Rationale*_ Percent-decoding the fragment and running a character encoding detector on it lead to non-deterministic behavior. Scripts in the document environment can decide what to do with percent-encoded fragments.

  _*Diffs*_ Firefox percent-decodes the fragment and runs a character encoding detector.

=== 6 Resolving a URL ===

=== 7 User Input of a URL ===

=== 8 Displaying a URL ===