/**
 * Copyright 2009 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Program used to generate test pages for the Client URL Internet Emission
 * Sniffer (Curlies) project.
 *
 * @author Shaopeng Jia (jia.shao.peng@gmail.com)
 */

#include <stdio.h>

#include <iostream>
#include <string>
#include <vector>

#include "config.h"
#include "testcases.h"

using namespace std;

static void WriteFileHeaderWithBase(FILE* output_file, const char* charset,
                                    const char* base) {
  fprintf(output_file,
      "<!-- Copyright 2009 Google Inc.\n\n"
      "Licensed under the Apache License, Version 2.0 (the \"License\");\n"
      "you may not use this file except in compliance with the License.\n"
      "You may obtain a copy of the License at\n\n"
      "     http://www.apache.org/licenses/LICENSE-2.0\n\n"
      "Unless required by applicable law or agreed to in writing, software\n"
      "distributed under the License is distributed on an \"AS IS\" BASIS,\n"
      "WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"
      "See the License for the specific language governing permissions and\n"
      "limitations under the License.\n\n"
      "Author: Shaopeng Jia (jia.shao.peng@gmail.com)\n"
      "Author: Erik van der Poel (erikvanderpoel@gmail.com)\n\n"
      "Note: This file is automatically generated by\n"
      " ../source/test-page-generator.cc. If you want to add additional\n"
      "tests, please add it in the ../source/testcases.cc, or contact the authors.\n"
      "-->\n\n"
      "<html>\n"
      "<head>\n"
      "<meta http-equiv=\"Content-Type\" "
      "content=\"text/html; charset=%s\">\n", charset);
  fprintf(output_file, "%s</head>\n<body>\n", base);
  fprintf(output_file, "<table border=\"1\">\n");
  fprintf(output_file, "<tr><td>Test ID</td><td>Test</td></tr>\n");
}

static void WriteFileHeader(FILE* output_file, const char* charset) {
  WriteFileHeaderWithBase(output_file, charset, "");
}

static void WriteFileFooter(FILE* output_file) {
  fprintf(output_file, "</table>\n");
  fprintf(output_file, "</body>\n");
  fprintf(output_file, "</html>\n");
}

static void GenerateTestCase(FILE* output_file, int id,
                             const char* prefix, const char* suffix,
                             const char* test_string,
                             const char* display_string, bool escaped) {
  if (strlen(test_string) <= 1) {
    int b = *test_string;
    fprintf(output_file,
            "<tr><td>%d</td><td>"
            "<img src=%chttp://%s9pz%d9pz9qz",
            id,
            b == '"' ? '\'' : '"', prefix,
            id);

    if (escaped) {
      fprintf(output_file, "%%%02X9qz", b);
    } else {
      fprintf(output_file, "%c9qz", b);
    }

    fprintf(output_file,
            "%s%c>%s%02X", suffix,
            b == '"' ? '\'' : '"',
            escaped ? "%" : "\\x", b);
    fprintf(output_file, "</td></tr>\n");
  } else {
    fprintf(output_file,
            "<tr><td>%d</td><td>"
            "<img src=\"http://%s9pz%d9pz9qz%s9qz%s\">%s"
            "</td></tr>\n",
            id,
            prefix, id, test_string, suffix,
            display_string);
  }
}

static void GenerateFormTestCase(FILE* output_file, int id,
                                 const char* test_string,
                                 const char* display_string, bool escaped,
                                 string* form_script) {
  char form_name[20];
  char frame_name[20];
  sprintf(form_name, "form%d", id);
  sprintf(frame_name, "frame%d", id);
  form_script->append("    document.");
  form_script->append(form_name);
  form_script->append(".submit();\n");

  fprintf(output_file,
          "<tr><td>%d</td> <td>%s</td>\n"
          "<td><form name='%s' method='get'"
          " action='http://%s' target='%s'>\n"
          "<input type='text' name='query' value=",
          id, display_string, form_name, kNoContentDomain.c_str(), frame_name);

  if (strlen(test_string) <= 1) {
    int b = *test_string;
    fprintf(output_file, "%c9pz%d9pz9qz",
            b == '"' ? '\'' : '"', id);
    if (escaped) {
      fprintf(output_file, "%%%02X9qz", b);
    } else {
      fprintf(output_file, "%c9qz", b);
    }
    fprintf(output_file, "%c", b == '"' ? '\'' : '"');
  } else {
    fprintf(output_file, "\'9pz%d9pz9qz%s9qz\'", id, test_string);
  }

  fprintf(output_file, " /></form>\n</td></tr>\n");
  fprintf(output_file,
          "<iframe name='%s' width='0' height='0' frameborder='0'>\n"
          "</iframe>\n", frame_name);
}

static FILE* OpenFile(FILE* main_file, const char* file) {
  const char* name = strchr(file, '/') + 1;
  fprintf(main_file, "<iframe src='%s'></iframe>\n", name);
  return fopen(file, "w");
}

static void GenerateRelativeTestCase(FILE* main_file,
                                     const TestCase& test_case) {
  char buf[128];
  snprintf(buf, sizeof(buf), "test_pages/relative%d.html", test_case.test_id);
  FILE* file = OpenFile(main_file, buf);
  snprintf(buf, sizeof(buf), "<base href='http://b9rz.%d.%s./b/c/d;p?q'>\n",
           test_case.test_id, kWildcardDomain.c_str());
  WriteFileHeaderWithBase(file, "US-ASCII", buf);
  string test_string;
  if (strchr(test_case.test_string, '%') != NULL) {
    snprintf(buf, sizeof(buf), "r9rz.%d.%s.", test_case.test_id,
             kWildcardDomain.c_str());
    string host = buf;
    snprintf(buf, sizeof(buf), test_case.test_string, host.c_str());
    test_string = buf;
  } else {
    test_string = test_case.test_string;
  }
  fprintf(file,
          "<tr><td>%d</td><td>"
          "<img src='%s'>"
          "</td></tr>\n",
          test_case.test_id, test_string.c_str());
  WriteFileFooter(file);
  fclose(file);
}

int main(int argc, const char* argv[]) {
  FILE* main_file = fopen("test_pages/main.html", "w");

  vector<FILE*> form(kEncodingSize);
  FILE* host_ascii_escaped =
      OpenFile(main_file, "test_pages/host-ascii-escaped.html");
  FILE* host_ascii_unescaped =
      OpenFile(main_file, "test_pages/host-ascii-unescaped.html");
  FILE* path_ascii_escaped =
      OpenFile(main_file, "test_pages/path-ascii-escape.html");
  FILE* path_ascii_unescaped =
      OpenFile(main_file, "test_pages/path-ascii-unescape.html");
  FILE* parameter_ascii_escaped =
      OpenFile(main_file, "test_pages/parameter-ascii-escaped.html");
  FILE* parameter_ascii_unescaped =
      OpenFile(main_file, "test_pages/parameter-ascii-unescaped.html");
  FILE* query_ascii_escaped =
      OpenFile(main_file, "test_pages/query-ascii-escaped.html");
  FILE* query_ascii_unescaped =
      OpenFile(main_file, "test_pages/query-ascii-unescaped.html");
  form[kAscii] =
      OpenFile(main_file, "test_pages/form-ascii.html");
  FILE* all_big5 =
      OpenFile(main_file, "test_pages/all-big5.html");
  form[kBig5] =
      OpenFile(main_file, "test_pages/form-big5.html");

  WriteFileHeader(host_ascii_escaped, "US-ASCII");
  WriteFileHeader(host_ascii_unescaped, "US-ASCII");
  WriteFileHeader(path_ascii_escaped, "US-ASCII");
  WriteFileHeader(path_ascii_unescaped, "US-ASCII");
  WriteFileHeader(parameter_ascii_escaped, "US-ASCII");
  WriteFileHeader(parameter_ascii_unescaped, "US-ASCII");
  WriteFileHeader(query_ascii_escaped, "US-ASCII");
  WriteFileHeader(query_ascii_unescaped, "US-ASCII");
  WriteFileHeader(form[kAscii], "US-ASCII");
  WriteFileHeader(all_big5, "big5");
  WriteFileHeader(form[kBig5], "big5");

  // First dimension denotes TestType, and second dimension denotes
  // whether it is escaped.
  FILE* file_matrix[][2] = {
    {host_ascii_unescaped, host_ascii_escaped},
    {path_ascii_unescaped, path_ascii_escaped},
    {parameter_ascii_unescaped, parameter_ascii_escaped},
    {query_ascii_unescaped, query_ascii_escaped},
    {form[kAscii], form[kAscii]},
  };
  // The index of the vector denotes Encoding.
  vector<string> form_script(kEncodingSize,
      "\n<script type='text/javascript'>\n"
      "  function myfunction() {\n");
  int num_of_test = entries_size();
  for (int index = 0; index < num_of_test; index++) {
    FILE* output_file;
    TestCase test_case = entries[index];
    TestType test_component = test_case.test_component;
    Encoding encoding = test_case.test_encoding;
    switch (encoding) {
      case kAscii:
        output_file = file_matrix[test_component][test_case.should_escape];
        break;
      case kBig5:
        switch (test_component) {
          case kFormGet:
            output_file = form[kBig5];
            break;
          default:
            output_file = all_big5;
        }
        break;
      default:
        cerr << "Unexpected test encoding: " << encoding;
    }

    string test_string = string(test_case.test_string);
    char buffer[100];
    snprintf(buffer, 100, "%d.%s./", test_case.test_id, kWildcardDomain.c_str());
    string prefix(buffer);
    switch (test_component) {
      case kHost:
        if (encoding != kAscii) {
          test_string = "." + test_string + ".";
        }
        snprintf(buffer, 100, ".%s./", kWildcardDomain.c_str());
        GenerateTestCase(output_file, test_case.test_id,
                         "", buffer,
                         test_string.c_str(),
                         test_case.test_string_for_display,
                         test_case.should_escape);
        break;
      case kPath:
        GenerateTestCase(output_file, test_case.test_id,
                         prefix.c_str(), "",
                         test_string.c_str(),
                         test_case.test_string_for_display,
                         test_case.should_escape);
        break;
      case kQuery:
        prefix += "search?q=";
        GenerateTestCase(output_file, test_case.test_id,
                         prefix.c_str(), "",
                         test_string.c_str(),
                         test_case.test_string_for_display,
                         test_case.should_escape);
        break;
      case kParameter:
        prefix += "search;q=";
        GenerateTestCase(output_file, test_case.test_id,
                         prefix.c_str(), "",
                         test_string.c_str(),
                         test_case.test_string_for_display,
                         test_case.should_escape);
        break;
      case kFormGet:
        GenerateFormTestCase(output_file,
                             test_case.test_id,
                             test_case.test_string,
                             test_case.test_string_for_display,
                             test_case.should_escape,
                             &form_script[encoding]);
        break;
      case kRelative:
        GenerateRelativeTestCase(main_file, test_case);
        break;
    }
  }

  for (int i = 0; i < kEncodingSize; i++) {
    form_script[i].append(
        "  }\n"
        "  window.onload = myfunction;\n"
        "</script>\n");
    fprintf(form[i], "%s", form_script[i].c_str());
  }
  WriteFileFooter(host_ascii_escaped);
  WriteFileFooter(host_ascii_unescaped);
  WriteFileFooter(path_ascii_escaped);
  WriteFileFooter(path_ascii_unescaped);
  WriteFileFooter(parameter_ascii_escaped);
  WriteFileFooter(parameter_ascii_unescaped);
  WriteFileFooter(query_ascii_escaped);
  WriteFileFooter(query_ascii_unescaped);
  WriteFileFooter(form[kAscii]);
  WriteFileFooter(all_big5);
  WriteFileFooter(form[kBig5]);

  fclose(host_ascii_escaped);
  fclose(host_ascii_unescaped);
  fclose(path_ascii_escaped);
  fclose(path_ascii_unescaped);
  fclose(parameter_ascii_escaped);
  fclose(parameter_ascii_unescaped);
  fclose(query_ascii_escaped);
  fclose(query_ascii_unescaped);
  fclose(form[kAscii]);
  fclose(all_big5);
  fclose(form[kBig5]);

  fclose(main_file);

  return 0;
}
